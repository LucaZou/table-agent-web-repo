FROM node:16-alpine AS dependencies
WORKDIR /app

# 设置npm淘宝镜像源
RUN npm config set registry https://registry.npmmirror.com

# 仅复制依赖相关文件，优化缓存
COPY package*.json ./
RUN npm install

FROM node:16-alpine AS builder
WORKDIR /app

# 从dependencies阶段复制node_modules
COPY --from=dependencies /app/node_modules ./node_modules
COPY . .

# 构建生产环境应用
ENV NODE_ENV=production
RUN npm run build

# 生产环境使用轻量级nginx服务器
FROM nginx:stable-alpine AS production

# 创建非root用户运行nginx
RUN addgroup -g 101 -S nginx \
    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \
    && mkdir -p /etc/nginx/ssl

# 复制构建产物和配置
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

# 配置gzip压缩提高性能
RUN echo "gzip on;\n\
gzip_types text/plain text/css application/javascript application/json;\n\
gzip_min_length 1000;\n\
gzip_comp_level 6;" >> /etc/nginx/conf.d/gzip.conf

# 安全增强配置
RUN echo "server_tokens off;\n\
add_header X-Content-Type-Options nosniff;\n\
add_header X-Frame-Options SAMEORIGIN;\n\
add_header X-XSS-Protection \"1; mode=block\";" >> /etc/nginx/conf.d/security.conf

# 设置适当的权限
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /etc/nginx/ssl && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid && \
    chmod -R 755 /usr/share/nginx/html

# 使用非root用户运行
USER nginx

EXPOSE 80 443
CMD ["nginx", "-g", "daemon off;"] 